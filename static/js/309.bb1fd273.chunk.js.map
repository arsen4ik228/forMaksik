{"version":3,"file":"static/js/309.bb1fd273.chunk.js","mappings":"iLACA,SAAgB,OAAS,mCAAmC,KAAO,iCAAiC,KAAO,iCAAiC,mBAAqB,+CAA+C,cAAgB,2C,8DCWjN,SAASA,IACpB,MAAM,UAAEC,IAAcC,EAAAA,EAAAA,MACjBC,EAAeC,IAAoBC,EAAAA,EAAAA,WAAS,IAG3C,YAAEC,EAAW,aAAEC,EAAY,eAAEC,EAAc,iBAAEC,IAAqBC,EAAAA,EAAAA,GAAgB,CAAET,UAAWA,IAGrG,OACIU,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAQC,OAAOC,SAAA,EAC3BC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,KAAiB,OAAXZ,QAAW,IAAXA,OAAW,EAAXA,EAAaa,SAAUC,YAAwB,OAAXd,QAAW,IAAXA,OAAW,EAAXA,EAAae,SAAUC,OAAmB,OAAXhB,QAAW,IAAXA,OAAW,EAAXA,EAAagB,UAG/FN,EAAAA,EAAAA,KAAA,OAAKJ,UAAWC,EAAQU,KAAKR,UACzBJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAQW,KAAKT,SAAA,EACzBJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAQY,cAAeC,QAASA,IAAMtB,GAAkBD,GAAeY,SAAA,CAClFZ,EAAgB,wCAAY,mDAAW,8GAE3CA,GACGa,EAAAA,EAAAA,KAAAW,EAAAA,SAAA,CAAAZ,SACqB,OAAhBN,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBmB,KAAI,CAACC,EAAMC,KAC1Bd,EAAAA,EAAAA,KAACe,EAAAA,SAAc,CAAAhB,UACXC,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACC,SAAUJ,EAAMK,WAAW,KADhBJ,QAM7BnB,EAAAA,EAAAA,MAAAgB,EAAAA,SAAA,CAAAZ,SAAA,CACmB,OAAdP,QAAc,IAAdA,OAAc,EAAdA,EAAgBoB,KAAI,CAACC,EAAMC,KACxBd,EAAAA,EAAAA,KAACe,EAAAA,SAAc,CAAAhB,UACXC,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACC,SAAUJ,KADCC,MAIV,OAAdtB,QAAc,IAAdA,OAAc,EAAdA,EAAgB2B,QAAS,IACtBnB,EAAAA,EAAAA,KAAA,OAAKJ,UAAWC,EAAQuB,mBAAmBrB,SAAC,4FAEnC,OAAZR,QAAY,IAAZA,OAAY,EAAZA,EAAcqB,KAAI,CAACC,EAAMC,KACtBd,EAAAA,EAAAA,KAACe,EAAAA,SAAc,CAAAhB,UACXC,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACC,SAAUJ,KADCC,cAQzCd,EAAAA,EAAAA,KAACqB,EAAAA,EAAK,CAACC,cAA0B,OAAXhC,QAAW,IAAXA,OAAW,EAAXA,EAAaiC,WAI/C,C","sources":["webpack://good_management/./src/UI/app/ConvertsPage/desktop/desktopConvertPage.module.css?f48c","UI/app/ConvertsPage/desktop/DesktopConvertPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"desktopConvertPage_dialog__8hM6u\",\"main\":\"desktopConvertPage_main__xtxA0\",\"body\":\"desktopConvertPage_body__dsmSk\",\"unSeenMessagesInfo\":\"desktopConvertPage_unSeenMessagesInfo__qxmgt\",\"archiveButton\":\"desktopConvertPage_archiveButton__OJqjQ\"};","import React, { useEffect, useState } from 'react'\nimport InputTextContainer from '@Custom/ContainerForInputText/InputTextContainer';\nimport Headers from \"@Custom/Headers/Headers\";\nimport classes from './desktopConvertPage.module.css'\nimport { useParams } from 'react-router-dom';\nimport { notEmpty } from '@helpers/helpers'\nimport Task from '../TaskContainer/Task'\nimport { useConvertsHook } from '@hooks/useConvertsHook';\nimport Input from '../Input';\n\n\n\nexport default function DesktopConvertPage() {\n    const { contactId } = useParams()\n  const [isViewArchive, setIsViewArchive] = useState(false)\n\n\n    const { contactInfo, seenConverts, unseenConverts, archiveConvaerts } = useConvertsHook({ contactId: contactId })\n\n\n    return (\n        <div className={classes.dialog}>\n            <Headers name={contactInfo?.userName} sectionName={contactInfo?.postName} avatar={contactInfo?.avatar}>\n            </Headers>\n\n            <div className={classes.main}>\n                <div className={classes.body}>\n                    <div className={classes.archiveButton} onClick={() => setIsViewArchive(!isViewArchive)}>\n                        {isViewArchive ? 'Скрыть ' : 'Показать'} завершенные задачи\n                    </div>\n                    {isViewArchive ? (\n                        <>\n                            {archiveConvaerts?.map((item, index) => (\n                                <React.Fragment key={index}>\n                                    <Task taskData={item} isArchive={true}></Task>\n                                </React.Fragment>\n                            ))}\n                        </>\n                    ) : (\n                        <>\n                            {unseenConverts?.map((item, index) => (\n                                <React.Fragment key={index}>\n                                    <Task taskData={item}></Task>\n                                </React.Fragment>\n                            ))}\n                            {unseenConverts?.length > 0 && (\n                                <div className={classes.unSeenMessagesInfo}> Новые сообщения </div>\n                            )}\n                            {seenConverts?.map((item, index) => (\n                                <React.Fragment key={index}>\n                                    <Task taskData={item}></Task>\n                                </React.Fragment>\n                            ))}\n                        </>\n                    )}\n                </div>\n            </div>\n            <Input reciverPostId={contactInfo?.postId}></Input>\n\n        </div>\n    )\n}\n"],"names":["DesktopConvertPage","contactId","useParams","isViewArchive","setIsViewArchive","useState","contactInfo","seenConverts","unseenConverts","archiveConvaerts","useConvertsHook","_jsxs","className","classes","dialog","children","_jsx","Headers","name","userName","sectionName","postName","avatar","main","body","archiveButton","onClick","_Fragment","map","item","index","React","Task","taskData","isArchive","length","unSeenMessagesInfo","Input","reciverPostId","postId"],"sourceRoot":""}