{"version":3,"file":"static/js/407.088942d0.chunk.js","mappings":"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","sources":["webpack://good_management/./src/UI/Custom/Headers/BottomHeaders/BottomHeaders.module.css?e3ba","webpack://good_management/./src/UI/Custom/Headers/BottomHeaders/ButtonAction/ButtonAction.module.css?2769","UI/Custom/Headers/BottomHeaders/ButtonAction/ButtonAction.jsx","UI/Custom/Headers/BottomHeaders/BottomHeaders.jsx","webpack://good_management/./src/UI/app/UserPage/User.module.css?1e50","webpack://good_management/./src/UI/Custom/modalSelectCheckBox/ModalSelectCheckBox.module.css?f9d2","UI/Custom/modalSelectCheckBox/ModalSelectCheckBox.jsx","UI/app/UserPage/User.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"editText\":\"BottomHeaders_editText__BUuuG\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ButtonAction_wrapper__S7EYo\"};","import React from \"react\";\nimport classes from \"./ButtonAction.module.css\";\nimport iconAdd from \"../../../../image/iconAdd.svg\";\nimport Blacksavetmp from \"../../../../image/Blacksavetmp.svg\";\nimport ButtonImage from \"@Custom/buttonImage/ButtonImage\";\nexport default function ButtonAction({ create, update }) {\n  return (\n    <div className={classes.wrapper}>\n      {create && (\n        <ButtonImage\n          name={\"создать\"}\n          icon={iconAdd}\n          onClick={create}\n        ></ButtonImage>\n      )}\n\n      {update && (\n        <ButtonImage\n          name={\"обновить\"}\n          icon={Blacksavetmp}\n          onClick={update}\n        ></ButtonImage>\n      )}\n    </div>\n  );\n}\n","import React from 'react'\nimport classes from \"./BottomHeaders.module.css\"\nimport ButtonAction from './ButtonAction/ButtonAction'\n\nexport default function BottomHeaders({children, create, update}) {\n  return (\n    <div className={classes.editText}>\n        {children}\n        <ButtonAction create={create} update={update}></ButtonAction>\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"User_dialog__0lk3a\",\"main\":\"User_main__44Hje\",\"block\":\"User_block__d+Mje\",\"column2\":\"User_column2__9VFcy\",\"avatarContainer\":\"User_avatarContainer__i07CK\",\"avatar\":\"User_avatar__P4b3Z\",\"hiddenInput\":\"User_hiddenInput__Jy+Gg\",\"btnSave\":\"User_btnSave__IZeTj\"};","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ModalSelectCheckBox_modal__U4QwJ\",\"modalWindow\":\"ModalSelectCheckBox_modalWindow__Ck41e\",\"header\":\"ModalSelectCheckBox_header__2+IHr\",\"item1\":\"ModalSelectCheckBox_item1__tqPjW\",\"item2\":\"ModalSelectCheckBox_item2__hzHot\",\"search\":\"ModalSelectCheckBox_search__G2+Vd\",\"exit\":\"ModalSelectCheckBox_exit__JUAnd\",\"table\":\"ModalSelectCheckBox_table__5lcjE\",\"row\":\"ModalSelectCheckBox_row__2dd5O\"};","import React from \"react\";\nimport classes from \"./ModalSelectCheckBox.module.css\";\nimport exitModal from \"@image/exitModal.svg\";\nimport Blacksavetmp from \"@image/Blacksavetmp.svg\";\nimport ButtonImage from \"@Custom/buttonImage/ButtonImage\";\n\nexport function ModalSelectCheckBox({\n  nameTable,\n  handleSearchValue,\n  handleSearchOnChange,\n  exit,\n  filterArray,\n  array,\n  arrayItem,\n  save,\n  \n  handleChecboxChange,\n  arrayChecked,\n  nameBtn,\n  iconBtn,\n}) {\n  return (\n    <div className={classes.modal}>\n      <div className={classes.modalWindow}>\n        <img\n          src={exitModal}\n          alt=\"exitModal\"\n          onClick={() => exit()}\n          className={classes.exit}\n        />\n\n        <div className={classes.header}>\n          <div className={classes.item1}>\n            <input\n              type=\"search\"\n              placeholder=\"Найти\"\n              value={handleSearchValue}\n              onChange={handleSearchOnChange}\n              className={classes.search}\n            />\n          </div>\n\n          {save && (\n            <div className={classes.item2}>\n              <ButtonImage\n                name={nameBtn ? nameBtn : \"сохранить\"}\n                icon={iconBtn ? iconBtn : Blacksavetmp}\n                onClick={save}\n              ></ButtonImage>\n            </div>\n          )}\n        </div>\n\n        <table className={classes.table}>\n          <thead>\n            <tr>\n              <th>{nameTable}</th>\n            </tr>\n          </thead>\n\n          {filterArray.length > 0 ? (\n            <tbody>\n              <tr>\n                <td>\n                  {filterArray?.map((item) => (\n                    <div\n                      key={item.id}\n                      className={classes.row}\n                      onClick={() => handleChecboxChange(item.id, item)}\n                    >\n                      <input\n                       type=\"checkbox\"\n                       checked={arrayChecked?.includes(item.id)}\n                      />\n                      {item[arrayItem]}\n                    </div>\n                  ))}\n                </td>\n              </tr>\n            </tbody>\n          ) : (\n            <tbody>\n              <tr>\n                <td>\n                  {array?.map((item) => (\n                    <div\n                      key={item.id}\n                      className={classes.row}\n                      onClick={() => handleChecboxChange(item.id, item)}\n                    >\n                      <input\n                         type=\"checkbox\"\n                         checked={arrayChecked?.includes(item.id)}\n                      />\n                      {item[arrayItem]}\n                    </div>\n                  ))}\n                </td>\n              </tr>\n            </tbody>\n          )}\n        </table>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport classes from \"./User.module.css\";\n\nimport Headers from \"@Custom/Headers/Headers\";\nimport BottomHeaders from \"@Custom/Headers/BottomHeaders/BottomHeaders\";\nimport Input from \"@Custom/Input/Input\";\n\nimport InputMask from \"react-input-mask\";\nimport { useUserHook } from \"@hooks\";\nimport HandlerMutation from \"@Custom/HandlerMutation\";\nimport { usePostImageMutation } from \"@services\";\nimport addCircle from \"@image/addCircleGrey.svg\";\nimport post from \"@image/post.svg\";\nimport ButtonAttach from \"@Custom/buttonAttach/ButtonAttach\";\nimport { useModalSelectCheckBox } from \"@hooks\";\nimport { ModalSelectCheckBox } from \"@Custom/modalSelectCheckBox/ModalSelectCheckBox\";\nimport { usePostsHook } from \"@hooks\";\nimport exitHeader from \"@image/exitHeader.svg\";\nimport iconAdd from \"@image/iconAdd.svg\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { setCreatedUserId } from \"@slices\";\n\nexport default function User() {\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [middleName, setMiddleName] = useState(\"\");\n  const [telephoneNumber, setTelephoneNumber] = useState(\"\");\n  const [isValid, setIsValid] = useState(false);\n\n  const [avatarLocal, setAvatarLocal] = useState(\"\");\n  const [file, setFile] = useState(\"\");\n\n  const [openModalSelectPosts, setOpenModalSelectPosts] = useState(\"\");\n  const [arrayCheckedPostsIds, setArrayCheckedPostsIds] = useState([]);\n  const [arrayCheckedPostsNames, setArrayCheckedPostsNames] = useState([]);\n\n  const handleChangeFirstName = (e) => {\n    const inputValue = e;\n    const lettersOnly = inputValue.replace(/[^A-Za-zА-Яа-я\\s]/g, \"\");\n\n    const formattedValue =\n      lettersOnly.charAt(0).toUpperCase() + lettersOnly.slice(1);\n\n    setFirstName(formattedValue);\n  };\n\n  const handleChangeLastName = (e) => {\n    const inputValue = e;\n    const lettersOnly = inputValue.replace(/[^A-Za-zА-Яа-я\\s]/g, \"\");\n\n    const formattedValue =\n      lettersOnly.charAt(0).toUpperCase() + lettersOnly.slice(1);\n\n    setLastName(formattedValue);\n  };\n\n  const handleChangeMiddleName = (e) => {\n    const inputValue = e;\n    const lettersOnly = inputValue.replace(/[^A-Za-zА-Яа-я\\s]/g, \"\");\n\n    const formattedValue =\n      lettersOnly.charAt(0).toUpperCase() + lettersOnly.slice(1);\n\n    setMiddleName(formattedValue);\n  };\n\n  const handleChangeTelephoneNumber = (e) => {\n    const cleanedPhone = e.target.value.replace(/\\D/g, \"\");\n    setTelephoneNumber(`+${cleanedPhone}`);\n  };\n\n  // Создание аккаунта\n  const {\n    // Создать user\n    reduxSelectedOrganizationId,\n    postUser,\n\n    isLoadingUserMutation,\n    isSuccessUserMutation,\n    isErrorUserMutation,\n    ErrorUserMutation,\n\n    localIsResponseUserMutation,\n\n    // Получит информацию для создания user\n    postsWithoutUser,\n    isLoadingGetUserNew,\n    isErrorGetUserNew,\n  } = useUserHook();\n\n  const [postImage] = usePostImageMutation();\n\n  // const handleCreateUserButtonClick = async () => {\n  //   const userData = {\n  //     firstName,\n  //     lastName,\n  //     middleName,\n  //     telephoneNumber,\n  //     organizationId: reduxSelectedOrganizationId,\n  //   };\n\n  //   if (file) {\n  //     const formData = new FormData();\n  //     formData.append(\"file\", file);\n  //     await postImage(formData)\n  //       .unwrap()\n  //       .then((result) => {\n  //         userData.avatar_url = result.filePath;\n  //       })\n  //       .catch((error) => {\n  //         console.error(\"Ошибка:\", JSON.stringify(error, null, 2));\n  //       });\n  //   }\n\n  //   await postUser(userData)\n  //     .unwrap()\n  //     .then((result) => saveUpdatePost(result.id))\n  //     .catch((error) => {\n  //       console.error(\"Ошибка:\", JSON.stringify(error, null, 2));\n  //     });\n  // };\n\n  // Для картинки\n  \n const dispatch = useDispatch();\n  const handleCreateUserButtonClick = async () => {\n    const userData = {\n        firstName,\n        lastName,\n        middleName,\n        telephoneNumber,\n        organizationId: reduxSelectedOrganizationId,\n    };\n\n    if (file) {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        try {\n            const result = await postImage(formData).unwrap();\n            userData.avatar_url = result.filePath;\n        } catch (error) {\n            console.error(\"Ошибка загрузки изображения:\", JSON.stringify(error, null, 2));\n            throw error; \n        }\n    }\n\n    try {\n        const result = await postUser(userData).unwrap();\n        saveUpdatePost(result.id);\n        dispatch(setCreatedUserId(result.id));\n    } catch (error) {\n        console.error(\"Ошибка создания пользователя:\", JSON.stringify(error, null, 2));\n        throw error;\n    }\n};\n\n  const fileInputRef = useRef(null);\n\n  const handleAvatarClick = () => {\n    fileInputRef.current.click();\n  };\n\n  //Загрузка картинки локально\n  const imageUploadHandlerLocal = (e) => {\n    const fileInput = e.target;\n    const file = e.target.files[0];\n    if (file) {\n      setFile(file);\n      const imageUrl = URL.createObjectURL(file);\n      setAvatarLocal(imageUrl);\n    }\n    // Сбрасываем значение инпута, чтобы можно было выбрать тот же файл\n    fileInput.value = \"\";\n  };\n\n  const deleteImage = () => {\n    if (avatarLocal) {\n      URL.revokeObjectURL(avatarLocal); // Очищаем URL из памяти\n    }\n    setFile(\"\");\n    setAvatarLocal(\"\");\n  };\n\n  // Для прикрепления поста\n  const {\n    filterArraySearchModalCheckBox,\n    handleCheckboxChange,\n    inputSearchModalCheckBox,\n    setInputSearchModalCheckBox,\n  } = useModalSelectCheckBox({\n    array: postsWithoutUser,\n    arrayItem: \"postName\",\n    setArrayChecked: setArrayCheckedPostsIds,\n  });\n\n  const exitsModalSelectPosts = () => {\n    setOpenModalSelectPosts(false);\n    const filtered = arrayCheckedPostsIds\n      .map(\n        (selectPost) =>\n          postsWithoutUser.find((post) => selectPost === post.id)?.postName\n      )\n      .filter(Boolean); // Убираем undefined\n    setArrayCheckedPostsNames(filtered);\n  };\n\n  const {\n    updatePost,\n    isLoadingUpdatePostMutation,\n    isSuccessUpdatePostMutation,\n    isErrorUpdatePostMutation,\n    ErrorUpdatePostMutation,\n  } = usePostsHook();\n\n  const saveUpdatePost = async (createdUserId) => {\n    if (arrayCheckedPostsIds.length > 0 && createdUserId) {\n      try {\n        await Promise.all(\n          arrayCheckedPostsIds.map(async (id) => {\n            await updatePost({\n              _id: id,\n              responsibleUserId: createdUserId,\n            })\n              .unwrap()\n              .then(() => {\n                reset();\n              })\n              .catch((error) => {\n                console.error(\n                  `Ошибка при обновлении поста ${id}:`,\n                  JSON.stringify(error, null, 2)\n                );\n              });\n          })\n        );\n      } catch (err) {\n        console.error(\"Ошибка выполнения запросов:\", err);\n      }\n    }\n  };\n\n  const reset = () => {\n    setFirstName(\"\");\n    setLastName(\"\");\n    setMiddleName(\"\");\n    setTelephoneNumber(\"\");\n    setAvatarLocal(\"\");\n    setFile(\"\");\n    setArrayCheckedPostsIds([]);\n    setArrayCheckedPostsNames([]);\n  };\n\n  useEffect(() => {\n    if (firstName && lastName && middleName && telephoneNumber.length == 12) {\n      setIsValid(true);\n    } else {\n      setIsValid(false);\n    }\n  }, [firstName, lastName, middleName, telephoneNumber]);\n\n  const navigate = useNavigate();\n\n  const createUserAndCreatePost = async () => {\n    try {\n      await handleCreateUserButtonClick();\n      navigate(\"/pomoshnik/postNew\");\n    } catch (error) {\n      console.error(\"Ошибка в процессе создания пользователя:\", error);\n    }\n  };\n\n  return (\n    <div className={classes.dialog}>\n      <Headers name={\"создание пользователя\"}>\n        <BottomHeaders></BottomHeaders>\n      </Headers>\n      <div className={classes.main}>\n        <div className={classes.block}>\n          <div className={classes.avatarContainer}>\n            <img\n              src={avatarLocal || addCircle}\n              alt=\"avatar\"\n              className={classes.avatar}\n              onClick={handleAvatarClick}\n            />\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              ref={fileInputRef}\n              className={classes.hiddenInput}\n              onChange={imageUploadHandlerLocal}\n            />\n            <img\n              src={exitHeader}\n              title={\"удалить картинку\"}\n              onClick={deleteImage}\n              style={{ width: \"12px\", height: \"12px\" }}\n            ></img>\n          </div>\n\n          <div className={classes.column2}>\n            <Input\n              name={\"Имя\"}\n              value={firstName}\n              onChange={handleChangeFirstName}\n            ></Input>\n\n            <Input\n              name={\"Фамилия\"}\n              value={lastName}\n              onChange={handleChangeLastName}\n            ></Input>\n\n            <Input\n              name={\"Отчество\"}\n              value={middleName}\n              onChange={handleChangeMiddleName}\n            ></Input>\n\n            <Input name={\"Телефон\"} isShowInput={true}>\n              <InputMask\n                mask=\"+9 (999) 999-99-99\"\n                value={telephoneNumber}\n                onChange={handleChangeTelephoneNumber}\n                placeholder=\"+9 (999) 999-99-99\"\n                required\n              >\n                {(inputProps) => (\n                  <input {...inputProps} type=\"tel\" id=\"phone\" />\n                )}\n              </InputMask>\n            </Input>\n\n            <ButtonAttach\n              image={post}\n              onClick={() => setOpenModalSelectPosts(true)}\n              selectArray={arrayCheckedPostsNames}\n              prefix={\"Посты: \"}\n              btnName={\"Пикрепить посты\"}\n              disabled={!isValid}\n            ></ButtonAttach>\n\n            {openModalSelectPosts && (\n              <ModalSelectCheckBox\n                nameTable={\"Посты\"}\n                handleSearchValue={inputSearchModalCheckBox}\n                handleSearchOnChange={(e) =>\n                  setInputSearchModalCheckBox(e.target.value)\n                }\n                exit={exitsModalSelectPosts}\n                filterArray={filterArraySearchModalCheckBox}\n                array={postsWithoutUser}\n                arrayItem={\"postName\"}\n                handleChecboxChange={handleCheckboxChange}\n                arrayChecked={arrayCheckedPostsIds}\n                save={createUserAndCreatePost}\n                nameBtn={\"создать\"}\n                iconBtn={iconAdd}\n              ></ModalSelectCheckBox>\n            )}\n\n            <button\n              onClick={handleCreateUserButtonClick}\n              className={classes.btnSave}\n              disabled={!isValid}\n            >\n              Сохранить\n            </button>\n          </div>\n        </div>\n\n        <HandlerMutation\n          Loading={isLoadingUserMutation}\n          Error={isErrorUserMutation && localIsResponseUserMutation}\n          Success={isSuccessUserMutation && localIsResponseUserMutation}\n          textSuccess={`Пользователь ${firstName} ${lastName} ${middleName} создан`}\n          textError={\n            ErrorUserMutation?.data?.errors?.[0]?.errors?.[0]\n              ? ErrorUserMutation.data.errors[0].errors[0]\n              : ErrorUserMutation?.data?.message\n          }\n        ></HandlerMutation>\n      </div>\n    </div>\n  );\n}\n"],"names":["ButtonAction","_ref","create","update","_jsxs","className","classes","wrapper","children","_jsx","ButtonImage","name","icon","iconAdd","onClick","Blacksavetmp","BottomHeaders","editText","ModalSelectCheckBox","nameTable","handleSearchValue","handleSearchOnChange","exit","filterArray","array","arrayItem","save","handleChecboxChange","arrayChecked","nameBtn","iconBtn","modal","modalWindow","src","exitModal","alt","header","item1","type","placeholder","value","onChange","search","item2","table","length","map","item","row","id","checked","includes","User","_ErrorUserMutation$da","_ErrorUserMutation$da2","_ErrorUserMutation$da3","_ErrorUserMutation$da4","_ErrorUserMutation$da5","firstName","setFirstName","useState","lastName","setLastName","middleName","setMiddleName","telephoneNumber","setTelephoneNumber","isValid","setIsValid","avatarLocal","setAvatarLocal","file","setFile","openModalSelectPosts","setOpenModalSelectPosts","arrayCheckedPostsIds","setArrayCheckedPostsIds","arrayCheckedPostsNames","setArrayCheckedPostsNames","reduxSelectedOrganizationId","postUser","isLoadingUserMutation","isSuccessUserMutation","isErrorUserMutation","ErrorUserMutation","localIsResponseUserMutation","postsWithoutUser","isLoadingGetUserNew","isErrorGetUserNew","useUserHook","postImage","usePostImageMutation","dispatch","useDispatch","handleCreateUserButtonClick","async","userData","organizationId","formData","FormData","append","result","unwrap","avatar_url","filePath","error","console","JSON","stringify","saveUpdatePost","setCreatedUserId","fileInputRef","useRef","filterArraySearchModalCheckBox","handleCheckboxChange","inputSearchModalCheckBox","setInputSearchModalCheckBox","useModalSelectCheckBox","setArrayChecked","updatePost","isLoadingUpdatePostMutation","isSuccessUpdatePostMutation","isErrorUpdatePostMutation","ErrorUpdatePostMutation","usePostsHook","createdUserId","Promise","all","_id","responsibleUserId","then","reset","catch","err","useEffect","navigate","useNavigate","dialog","Headers","main","block","avatarContainer","addCircle","avatar","handleAvatarClick","current","click","accept","ref","hiddenInput","e","fileInput","target","files","imageUrl","URL","createObjectURL","exitHeader","title","deleteImage","revokeObjectURL","style","width","height","column2","Input","lettersOnly","replace","formattedValue","charAt","toUpperCase","slice","isShowInput","InputMask","mask","cleanedPhone","required","inputProps","ButtonAttach","image","post","selectArray","prefix","btnName","disabled","exitsModalSelectPosts","filtered","selectPost","_postsWithoutUser$fin","find","postName","filter","Boolean","btnSave","HandlerMutation","Loading","Error","Success","textSuccess","textError","data","errors","message"],"sourceRoot":""}