{"version":3,"file":"static/js/765.bd21e407.chunk.js","mappings":"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","sources":["webpack://good_management/./src/UI/Custom/Headers/BottomHeaders/BottomHeaders.module.css?e3ba","webpack://good_management/./src/UI/Custom/Headers/BottomHeaders/ButtonAction/ButtonAction.module.css?2769","UI/Custom/Headers/BottomHeaders/ButtonAction/ButtonAction.jsx","UI/Custom/Headers/BottomHeaders/BottomHeaders.jsx","UI/app/CompanySchema/desktop/schemeСompanies/SchemeСompanies.module.css","UI/app/CompanySchema/desktop/schemeСompanies/elementTree/Node.jsx","UI/app/CompanySchema/desktop/schemeСompanies/SchemeСompanies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"editText\":\"BottomHeaders_editText__BUuuG\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ButtonAction_wrapper__S7EYo\"};","import React from \"react\";\nimport classes from \"./ButtonAction.module.css\";\nimport iconAdd from \"../../../../image/iconAdd.svg\";\nimport Blacksavetmp from \"../../../../image/Blacksavetmp.svg\";\nimport ButtonImage from \"@Custom/buttonImage/ButtonImage\";\nexport default function ButtonAction({ create, update }) {\n  return (\n    <div className={classes.wrapper}>\n      {create && (\n        <ButtonImage\n          name={\"создать\"}\n          icon={iconAdd}\n          onClick={create}\n        ></ButtonImage>\n      )}\n\n      {update && (\n        <ButtonImage\n          name={\"обновить\"}\n          icon={Blacksavetmp}\n          onClick={update}\n        ></ButtonImage>\n      )}\n    </div>\n  );\n}\n","import React from 'react'\nimport classes from \"./BottomHeaders.module.css\"\nimport ButtonAction from './ButtonAction/ButtonAction'\n\nexport default function BottomHeaders({children, create, update}) {\n  return (\n    <div className={classes.editText}>\n        {children}\n        <ButtonAction create={create} update={update}></ButtonAction>\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"SchemeСompanies_dialog__rOiHQ\",\"main\":\"SchemeСompanies_main__5cJmR\"};","import React from \"react\";\nimport { TreeNode } from \"react-organizational-chart\";\nimport { Card, Button } from \"antd\";\nimport { useNavigate } from \"react-router-dom\";\nimport DrawerUpdateOrganization from \"../../../drawer/drawerForOrganization/DrawerUpdateOrganization\";\n\nexport default function Node({ organization, allOrganizations, childrenOrg }) {\n  const navigate = useNavigate();\n  const cardClick = (organizationId) => {\n    navigate(`/pomoshnik/postSchema/${organizationId}`);\n  };\n\n  return (\n    <TreeNode\n      label={\n        <Card\n          loading={false}\n          style={{\n            display: \"inline-block\",\n            width: \"300px\",\n            height: \"175px\",\n            backgroundColor: organization.organizationColor,\n            boxShadow: \"0px 0px 4px 0px rgba(0, 0, 0, 0.25)\",\n          }}\n        >\n          <DrawerUpdateOrganization\n            organizationId={organization.id}\n            allOrganizations={allOrganizations}\n          ></DrawerUpdateOrganization>\n\n          <Button type=\"link\" onClick={() => cardClick(organization.id)}>\n            {organization.organizationName}\n          </Button>\n        </Card>\n      }\n    >\n      {/* Рекурсивно отображаем дочерние элементы */}\n      {childrenOrg && childrenOrg.length > 0\n        ? childrenOrg.map((child) => (\n            <Node\n              key={child.id}\n              organization={child}\n              allOrganizations={allOrganizations}\n              childrenOrg={child.children}\n            />\n          ))\n        : null}\n    </TreeNode>\n  );\n}","import React, { useState, useEffect } from \"react\";\nimport classes from \"./SchemeСompanies.module.css\";\n\nimport _ from \"lodash\";\n\nimport { Card } from \"antd\";\nimport { Tree, TreeNode } from \"react-organizational-chart\";\n\nimport Headers from \"@Custom/Headers/Headers\";\nimport BottomHeaders from \"@Custom/Headers/BottomHeaders/BottomHeaders.jsx\";\n\nimport Node from \"./elementTree/Node.jsx\";\nimport { useAllOrganizations } from \"@hooks/Organization/useAllOrganizations.js\";\nimport DrawerCreateOrganization from \"../../drawer/drawerForOrganization/DrawerCreateOrganization\";\n\nconst buildTree = (organizations) => {\n  const postMap = {};\n  const roots = [];\n\n  // Создаем карту постов\n  organizations.forEach((post) => {\n    post.children = [];\n    postMap[post.id] = post;\n  });\n\n  // Строим дерево\n  organizations.forEach((post) => {\n    if (post.parentOrganizationId === null) {\n      roots.push(post);\n    } else {\n      if (postMap[post.parentOrganizationId]) {\n        postMap[post.parentOrganizationId].children.push(post);\n      }\n    }\n  });\n\n  return roots;\n};\n\nconst OrganizationTree = ({ organizations }) => {\n  const tree = buildTree(organizations);\n  return (\n    <>\n      {tree.map((org) => (\n        <Node\n          key={org.id}\n          organization={org}\n          allOrganizations={organizations}\n          childrenOrg={org.children}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default function SchemeСompanies() {\n  const { organizations, isLoadingOrganization, isErrorOrganization } =\n    useAllOrganizations();\n\n  const [getOrganizations, setGetOrganizations] = useState([]);\n  const [openCreateOrganization, setOpenCreateOrganization] = useState(false);\n\n  const createOrganization = () => {\n    setOpenCreateOrganization(true);\n  };\n\n  useEffect(() => {\n    if (!_.isEqual(getOrganizations, organizations)) {\n      setGetOrganizations(_.cloneDeep(organizations));\n    }\n  }, [organizations]);\n\n  return (\n    <div className={classes.dialog}>\n      <Headers name={\"схема компании\"}>\n        <BottomHeaders create={createOrganization} />\n      </Headers>\n\n      <DrawerCreateOrganization\n        open={openCreateOrganization}\n        setOpen={setOpenCreateOrganization}\n        allOrganizations={organizations}\n      ></DrawerCreateOrganization>\n\n      <div className={classes.main}>\n        <Tree\n          lineWidth={\"2px\"}\n          lineColor={\"#ccc\"}\n          lineBorderRadius={\"10px\"}\n          label={\n            <Card\n              loading={false}\n              style={{\n                display: \"inline-block\",\n                width: \"300px\",\n                height: \"175px\",\n                boxShadow: \"0px 0px 4px 0px rgba(0, 0, 0, 0.25)\",\n              }}\n            >\n              <p>МОЙ БИЗНЕС</p>\n              <p>СОБСТВЕННИК</p>\n              <p>Иванов Иван</p>\n            </Card>\n          }\n        >\n          <OrganizationTree organizations={getOrganizations}></OrganizationTree>\n        </Tree>\n      </div>\n    </div>\n  );\n}\n"],"names":["ButtonAction","_ref","create","update","_jsxs","className","classes","wrapper","children","_jsx","ButtonImage","name","icon","iconAdd","onClick","Blacksavetmp","BottomHeaders","editText","Node","organization","allOrganizations","childrenOrg","navigate","useNavigate","TreeNode","label","Card","loading","style","display","width","height","backgroundColor","organizationColor","boxShadow","DrawerUpdateOrganization","organizationId","id","Button","type","cardClick","organizationName","length","map","child","OrganizationTree","organizations","tree","postMap","roots","forEach","post","parentOrganizationId","push","buildTree","_Fragment","org","SchemeСompanies","isLoadingOrganization","isErrorOrganization","useAllOrganizations","getOrganizations","setGetOrganizations","useState","openCreateOrganization","setOpenCreateOrganization","useEffect","_","dialog","Headers","createOrganization","DrawerCreateOrganization","open","setOpen","main","Tree","lineWidth","lineColor","lineBorderRadius"],"sourceRoot":""}